plugins:
  - serverless-finch
  - serverless-offline
  - serverless-cloudfront-invalidate

service: shopifyapp

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-west-1

  environment:
    SHOPIFY_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_KEY}
    SHOPIFY_API_SECRET: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_SECRET}
    SHOPIFY_SCOPE: "read_script_tags,write_script_tags,read_orders,write_orders,read_products,write_products"
    APP_NAME : "shopifyapp"

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - s3:Get*
        - s3:List*
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::${self:service}-bucket", "/*" ] ]
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_NAME}"
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_NAME}/index/domain-index"

package:
  individually: true
  exclude:
    - ./**

functions:

  index:
    handler : back/dist/index.handler
    name: ${self:service}_index
    description: First step of the OAuth Handshake
    events:
      - http:
          path: /
          method: get
          cors: true
    package:
      include:
        - ./back/dist/index.js
        - ./back/dist/utils/index.js

  auth:
    handler : back/dist/auth.handler
    name: ${self:service}_auth
    description: Second step of the OAuth Handshake
    events:
      - http:
          path: /auth
          method: get
          cors: true
    package:
      include:
        - ./back/dist/auth.js
        - ./back/dist/utils/index.js

  auth_callback:
    handler: back/dist/auth_callback.handler
    name: ${self:service}_auth_callback
    description: Third step of the OAuth Handshake
    events:
      - http:
          path: /auth/callback
          method: get
          cors: true
    package:
      include:
        - ./back/dist/auth_callback.js
        - ./back/dist/utils/index.js
        - ./back/node_modules/node-fetch/**
  token:
    handler: back/dist/token.handler
    name: ${self:service}_token
    description: Get token from DynamoDB
    events:
      - http:
          path: /token
          method: post
          cors: true
    package:
      include:
        - ./back/dist/token.js
        - ./back/dist/utils/index.js

resources:
  Resources:

    ShopsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.APP_NAME}
        AttributeDefinitions:
          - AttributeName: shopId
            AttributeType: S
          - AttributeName: domain
            AttributeType: S
        KeySchema:
          - AttributeName: shopId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: domain-index
            KeySchema:
              - AttributeName: domain
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CloudFrontOriginAccessIdentity: # We use this name as Ref later
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: CloudFront origin access identity

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-bucket
        AccessControl: 'Private'
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    S3BucketPolicy:
      DependsOn:
        - S3Bucket
        - CloudFrontOriginAccessIdentity
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
            Action:
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket]]
              - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket, "/*"]]
            Principal:
              AWS : !Join [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", !Ref CloudFrontOriginAccessIdentity]]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - S3Bucket
        - CloudFrontOriginAccessIdentity
      Properties:
        DistributionConfig:
          Enabled: "true"
          Origins:
            - Id: !Ref S3Bucket
              DomainName: !Join [".", [!Ref S3Bucket, "s3.amazonaws.com"]]
              S3OriginConfig:
                OriginAccessIdentity: !Join ["/", ["origin-access-identity/cloudfront", !Ref CloudFrontOriginAccessIdentity]]
          PriceClass: PriceClass_100
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            ViewerProtocolPolicy: redirect-to-https # this is required
            TargetOriginId: !Ref S3Bucket
            ForwardedValues:
              QueryString: false
          DefaultRootObject: index.html
          CustomErrorResponses: # For Single Page App
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html

custom:
  client:
    bucketName: ${self:service}-bucket
    manageResources: false
    distributionFolder : front/dist
  cloudfrontInvalidate:
    distributionId: '' # Add your distribution ID
    distributionIdKey: "CDNDistributionId" #conditional, distributionId or distributionIdKey is required.
    items: # one or more paths required
      - "/*"