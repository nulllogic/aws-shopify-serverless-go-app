plugins:
  - serverless-finch
  - serverless-offline

service: easyfields

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-west-1

  environment:
    SHOPIFY_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_KEY}
    SHOPIFY_API_SECRET: ${ssm:/${self:service}/${self:provider.stage}/SHOPIFY_API_SECRET}
    SHOPIFY_SCOPE: "read_script_tags,write_script_tags,read_orders,write_orders,read_products,write_products"
    APP_NAME : "shopifyapp" # your app name


  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - s3:Get*
        - s3:List*
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::${self:service}-bucket", "/*" ] ]
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_NAME}"
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_NAME}/index/domain-index"

package:
  individually: true
  exclude:
    - ./**

functions:

  index:
    handler : back/dist/index.handler
    name: ${self:service}_index
    description: First step of the OAuth Handshake
    events:
      - http:
          path: /
          method: get
          cors: true
    package:
      include:
        - ./back/dist/index.js
        - ./back/dist/utils/index.js

  auth:
    handler : back/dist/auth.handler
    name: ${self:service}_auth
    description: Second step of the OAuth Handshake
    events:
      - http:
          path: /auth
          method: get
          cors: true
    package:
      include:
        - ./back/dist/auth.js
        - ./back/dist/utils/index.js

  auth_callback:
    handler: back/dist/auth_callback.handler
    name: ${self:service}_auth_callback
    description: Third step of the OAuth Handshake
    events:
      - http:
          path: /auth/callback
          method: get
          cors: true
    package:
      include:
        - ./back/dist/auth_callback.js
        - ./back/dist/utils/index.js
        - ./back/node_modules/node-fetch/**
#
#  auth_callback:
#    handler: auth_callback
#    name: ${self:service}_auth_callback
#    description: Callback function for the OAuth Handshake
#
#    events:
#      - http:
#          path: /auth/callback
#          method: get
#          cors: true
#    package:
#      include:
#        - auth_callback
#
#  uninstall:
#    handler: webhooks/uninstall
#    name: ${self:service}_webhooks_uninstall
#    description: Callback function for the OAuth Handshake
#
#    events:
#      - http:
#          path: /webhooks/uninstall
#          method: post
#          cors: true
#    package:
#      include:
#        - webhooks/uninstall


resources:
  Resources:

    ShopsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.APP_NAME}
        AttributeDefinitions:
          - AttributeName: shopId
            AttributeType: S
          - AttributeName: domain
            AttributeType: S
        KeySchema:
          - AttributeName: shopId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: domain-index
            KeySchema:
              - AttributeName: domain
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST


    S3Bucket:
      Type: AWS::S3::Bucket

      Properties:
        BucketName: ${self:service}-bucket
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:service}-bucket/*

custom:
  client:
    bucketName: ${self:service}-bucket
    manageResources: false
    distributionFolder : front/dist
